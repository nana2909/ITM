// <auto-generated />
using System;
using APIServer.Models.User;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace APIServer.Migrations
{
    [DbContext(typeof(AuthenticationContext))]
    [Migration("20210117193644_updateDbSet")]
    partial class updateDbSet
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("APIServer.Models.Admission.tbAdmission", b =>
                {
                    b.Property<string>("AdmissionID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClassObtained")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("date");

                    b.Property<string>("ExCenter")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExEnrollmentNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ExField")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("ExMarkSecured")
                        .HasColumnType("float");

                    b.Property<string>("ExStream")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExUniversity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FieldCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OptionalSubjectID")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("OutOfDate")
                        .HasColumnType("date");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResidentialAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpecializedSubjectID")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SportsDetails")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("StreamCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("StudentEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("tbAdmissionStatusStatusID")
                        .HasColumnType("int");

                    b.Property<string>("tbFieldFieldCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("tbOpSubjectSubjectID")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("tbSpeSubjectSubjectID")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("tbStreamStreamCode")
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AdmissionID");

                    b.HasIndex("tbAdmissionStatusStatusID");

                    b.HasIndex("tbFieldFieldCode");

                    b.HasIndex("tbOpSubjectSubjectID");

                    b.HasIndex("tbSpeSubjectSubjectID");

                    b.HasIndex("tbStreamStreamCode");

                    b.ToTable("tbAdmission");
                });

            modelBuilder.Entity("APIServer.Models.Admission.tbAdmissionStatus", b =>
                {
                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("StatusContent")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("StatusID");

                    b.ToTable("tbAdmissionStatus");
                });

            modelBuilder.Entity("APIServer.Models.Course.tbCourse", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CoureseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("text");

                    b.Property<string>("FieldCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("StreamCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("imgUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("isNew")
                        .HasColumnType("bit");

                    b.Property<string>("tbFieldFieldCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("tbStreamStreamCode")
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CourseCode");

                    b.HasIndex("tbFieldFieldCode");

                    b.HasIndex("tbStreamStreamCode");

                    b.ToTable("tbCourse");
                });

            modelBuilder.Entity("APIServer.Models.Department.tbDepartment", b =>
                {
                    b.Property<string>("DepartmentID")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("imgUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DepartmentID");

                    b.ToTable("tbDepartment");
                });

            modelBuilder.Entity("APIServer.Models.Event.tbEvent", b =>
                {
                    b.Property<string>("EventID")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("imgUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("EventID");

                    b.ToTable("tbEvent");
                });

            modelBuilder.Entity("APIServer.Models.Facility.tbFacility", b =>
                {
                    b.Property<string>("FacCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FacName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("imgUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("FacCode");

                    b.ToTable("tbFacility");
                });

            modelBuilder.Entity("APIServer.Models.Faculty.tbFaculty", b =>
                {
                    b.Property<string>("FacultyID")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DepartmentID")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("imgUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("tbDepartmentDepartmentID")
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("FacultyID");

                    b.HasIndex("tbDepartmentDepartmentID");

                    b.ToTable("tbFaculty");
                });

            modelBuilder.Entity("APIServer.Models.Feedback.tbFeedback", b =>
                {
                    b.Property<int>("FbID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("date");

                    b.Property<string>("FbContent")
                        .HasColumnType("text");

                    b.Property<string>("FbSubject")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FbID");

                    b.ToTable("tbFeedback");
                });

            modelBuilder.Entity("APIServer.Models.Field.tbField", b =>
                {
                    b.Property<string>("FieldCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreamCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("tbStreamStreamCode")
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("FieldCode");

                    b.HasIndex("tbStreamStreamCode");

                    b.ToTable("tbField");
                });

            modelBuilder.Entity("APIServer.Models.OptionalSubject.tbOpSubject", b =>
                {
                    b.Property<string>("SubjectID")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubjectID");

                    b.ToTable("tbOpSubject");
                });

            modelBuilder.Entity("APIServer.Models.SpecicalSubject.tbSpeSubject", b =>
                {
                    b.Property<string>("SubjectID")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FieldCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("tbFieldFieldCode")
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("SubjectID");

                    b.HasIndex("tbFieldFieldCode");

                    b.ToTable("tbSpeSubject");
                });

            modelBuilder.Entity("APIServer.Models.Stream.tbStream", b =>
                {
                    b.Property<string>("StreamCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StreamCode");

                    b.ToTable("tbStream");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("APIServer.Models.User.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(150)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("APIServer.Models.Admission.tbAdmission", b =>
                {
                    b.HasOne("APIServer.Models.Admission.tbAdmissionStatus", "tbAdmissionStatus")
                        .WithMany("tbAdmissions")
                        .HasForeignKey("tbAdmissionStatusStatusID");

                    b.HasOne("APIServer.Models.Field.tbField", "tbField")
                        .WithMany("tbAdmissions")
                        .HasForeignKey("tbFieldFieldCode");

                    b.HasOne("APIServer.Models.OptionalSubject.tbOpSubject", "tbOpSubject")
                        .WithMany("tbAdmissions")
                        .HasForeignKey("tbOpSubjectSubjectID");

                    b.HasOne("APIServer.Models.SpecicalSubject.tbSpeSubject", "tbSpeSubject")
                        .WithMany("tbAdmissions")
                        .HasForeignKey("tbSpeSubjectSubjectID");

                    b.HasOne("APIServer.Models.Stream.tbStream", "tbStream")
                        .WithMany("TbAdmissions")
                        .HasForeignKey("tbStreamStreamCode");

                    b.Navigation("tbAdmissionStatus");

                    b.Navigation("tbField");

                    b.Navigation("tbOpSubject");

                    b.Navigation("tbSpeSubject");

                    b.Navigation("tbStream");
                });

            modelBuilder.Entity("APIServer.Models.Course.tbCourse", b =>
                {
                    b.HasOne("APIServer.Models.Field.tbField", "tbField")
                        .WithMany("TbCourses")
                        .HasForeignKey("tbFieldFieldCode");

                    b.HasOne("APIServer.Models.Stream.tbStream", "tbStream")
                        .WithMany("tbCourses")
                        .HasForeignKey("tbStreamStreamCode");

                    b.Navigation("tbField");

                    b.Navigation("tbStream");
                });

            modelBuilder.Entity("APIServer.Models.Faculty.tbFaculty", b =>
                {
                    b.HasOne("APIServer.Models.Department.tbDepartment", "tbDepartment")
                        .WithMany("tbFaculties")
                        .HasForeignKey("tbDepartmentDepartmentID");

                    b.Navigation("tbDepartment");
                });

            modelBuilder.Entity("APIServer.Models.Field.tbField", b =>
                {
                    b.HasOne("APIServer.Models.Stream.tbStream", "tbStream")
                        .WithMany("TbFields")
                        .HasForeignKey("tbStreamStreamCode");

                    b.Navigation("tbStream");
                });

            modelBuilder.Entity("APIServer.Models.SpecicalSubject.tbSpeSubject", b =>
                {
                    b.HasOne("APIServer.Models.Field.tbField", "tbField")
                        .WithMany("tbSpeSubjects")
                        .HasForeignKey("tbFieldFieldCode");

                    b.Navigation("tbField");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("APIServer.Models.Admission.tbAdmissionStatus", b =>
                {
                    b.Navigation("tbAdmissions");
                });

            modelBuilder.Entity("APIServer.Models.Department.tbDepartment", b =>
                {
                    b.Navigation("tbFaculties");
                });

            modelBuilder.Entity("APIServer.Models.Field.tbField", b =>
                {
                    b.Navigation("tbAdmissions");

                    b.Navigation("TbCourses");

                    b.Navigation("tbSpeSubjects");
                });

            modelBuilder.Entity("APIServer.Models.OptionalSubject.tbOpSubject", b =>
                {
                    b.Navigation("tbAdmissions");
                });

            modelBuilder.Entity("APIServer.Models.SpecicalSubject.tbSpeSubject", b =>
                {
                    b.Navigation("tbAdmissions");
                });

            modelBuilder.Entity("APIServer.Models.Stream.tbStream", b =>
                {
                    b.Navigation("TbAdmissions");

                    b.Navigation("tbCourses");

                    b.Navigation("TbFields");
                });
#pragma warning restore 612, 618
        }
    }
}
